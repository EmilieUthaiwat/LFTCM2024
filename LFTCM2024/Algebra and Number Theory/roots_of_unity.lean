import Mathlib.NumberTheory.Cyclotomic.Basic


open scoped NumberField BigOperators

variable {F : Type*} [Field F] [NumberField F] (Œ∂ : ùìû F) (n : ‚Ñï)


--First lets look at the two defining properties of a primitive root
example (h : IsPrimitiveRoot Œ∂ n) : Œ∂ ^ n = 1 := by exact h.pow_eq_one

example (h : IsPrimitiveRoot Œ∂ n) : ‚àÄ l : ‚Ñï, Œ∂ ^ l = 1 ‚Üí n ‚à£ l := by exact h.dvd_of_pow_eq_one

example :  IsPrimitiveRoot Œ∂ 1 ‚Üî Œ∂ = 1 := by exact IsPrimitiveRoot.one_right_iff

/- Next lets look at geometric sums. Note that we have  `geom_sum_mul_neg` which says
(‚àë i in Finset.range n, x ^ i) * (1 - x) = 1 - x ^ n, so we can use this to check the sum divides
the rhs  -/
lemma geo_sum_dvd (j : ‚Ñï) : (‚àë i in Finset.range j , Œ∂ ^ i) ‚à£ 1 - Œ∂ ^ j := by
  rw [‚Üê geom_sum_mul_neg]
  sorry

-- % is the remainder operator
example : 5 % 2 = 1 := by norm_num

--we can use it to find inverses modulo n, we'll need this later
lemma coprime_exists_inverse {n j : ‚Ñï} (h : j.Coprime n) (hn: 1 < n) : ‚àÉ k : ‚Ñï, j * k % n = 1 := by
  exact  Nat.exists_mul_emod_eq_one_of_coprime h hn

/-Associated is defined quite generally: Two elements of a `Monoid` are `Associated` if one of them is another one
multiplied by a unit on the right. For what follows, we will use equivalence of the definition
in terms of mutual divisibility see `dvd_dvd_iff_associated`

 Its stated in a weird way, with this Coprime to 0 thing, but its to make it uniform later.
-/

lemma associated_case_0 (j : ‚Ñï) (hj : j.Coprime 0) : Associated (1 - Œ∂ ) (1 - Œ∂ ^ j) := by
  -- you may want to use `Nat.coprime_zero_right`
  sorry

--use that 1-th primitive roots are 1 and then associated_zero_iff_eq_zero
lemma associated_case_1 (j : ‚Ñï) (h : IsPrimitiveRoot Œ∂ 1) :
    Associated (1 - Œ∂ ) (1 - Œ∂ ^ j) := by
  --look at `IsPrimitiveRoot.one_right_iff`
  sorry


/-Lets check that (1 - Œ∂ ) and  (1 - Œ∂ ^ j) are associated -/
theorem associated_one_sub_pow_primitive_root_of_coprime {n j : ‚Ñï} (h : IsPrimitiveRoot Œ∂ n)
  (hj : j.Coprime n) : Associated (1 - Œ∂ ) (1 - Œ∂ ^ j) := by
  refine' associated_of_dvd_dvd ‚ü®‚àë i in Finset.range j, Œ∂ ^ i, by rw [‚Üê geom_sum_mul_neg, mul_comm]‚ü© _
  rcases eq_or_ne n 0 with (rfl | hn')
  ¬∑ sorry
  /-now do the n = 1 or n > 1 case. For the n > 1 case, find the inverse of j modulo n and use
  ‚àë i in Finset.range m, (Œ∂ ^ j) ^ i where m is the inverse.
  -/
  sorry


/-Using the above we can then do the general case-/
theorem associated_one_sub_pow_primitive_root_of_coprime_gen {n j k : ‚Ñï} (h : IsPrimitiveRoot Œ∂ n)
  (hk : k.Coprime n) (hj : j.Coprime n) : Associated (1 - Œ∂ ^ j) (1 - Œ∂ ^ k) := by
  suffices ‚àÄ {j : ‚Ñï}, j.Coprime n ‚Üí Associated (1 - Œ∂) (1 - Œ∂ ^ j) by
    sorry
  exact associated_one_sub_pow_primitive_root_of_coprime Œ∂ h
